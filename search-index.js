var N = null;var searchIndex = {};
searchIndex["atomic"]={"doc":"Generic `Atomic<T>` wrapper type","items":[[5,"fence","atomic","An atomic fence.",N,N],[4,"Ordering","","Atomic memory orderings",N,N],[13,"Relaxed","","No ordering constraints, only atomic operations.",0,N],[13,"Release","","When coupled with a store, all previous operations become ordered before any load of this value with [`Acquire`] (or stronger) ordering. In particular, all previous writes become visible to all threads that perform an [`Acquire`] (or stronger) load of this value.",0,N],[13,"Acquire","","When coupled with a load, if the loaded value was written by a store operation with [`Release`] (or stronger) ordering, then all subsequent operations become ordered after that store. In particular, all subsequent loads will see data written before the store.",0,N],[13,"AcqRel","","Has the effects of both [`Acquire`] and [`Release`] together: For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.",0,N],[13,"SeqCst","","Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store operations, respectively) with the additional guarantee that all threads see all sequentially consistent operations in the same order.",0,N],[3,"Atomic","","A generic atomic wrapper type which allows an object to be safely shared between threads.",N,N],[11,"new","","Creates a new `Atomic`.",1,[[["t"]],["atomic"]]],[11,"is_lock_free","","Checks if `Atomic` objects of this type are lock-free.",1,[[],["bool"]]],[11,"load","","Loads a value from the `Atomic`.",1,[[["self"],["ordering"]],["t"]]],[11,"store","","Stores a value into the `Atomic`.",1,[[["self"],["t"],["ordering"]]]],[11,"swap","","Stores a value into the `Atomic`, returning the old value.",1,[[["self"],["t"],["ordering"]],["t"]]],[11,"compare_exchange","","Stores a value into the `Atomic` if the current value is the same as the `current` value.",1,[[["self"],["t"],["t"],["ordering"],["ordering"]],["result"]]],[11,"compare_exchange_weak","","Stores a value into the `Atomic` if the current value is the same as the `current` value.",1,[[["self"],["t"],["t"],["ordering"],["ordering"]],["result"]]],[11,"fetch_and","","Logical \"and\" with a boolean value.",1,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_or","","Logical \"or\" with a boolean value.",1,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",1,[[["self"],["bool"],["ordering"]],["bool"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["i8"],["ordering"]],["i8"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["i16"],["ordering"]],["i16"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["i32"],["ordering"]],["i32"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["i64"],["ordering"]],["i64"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["isize"],["ordering"]],["isize"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["i128"],["ordering"]],["i128"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_add","","Add to the current value, returning the previous value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["u8"],["ordering"]],["u8"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["u16"],["ordering"]],["u16"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["u32"],["ordering"]],["u32"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["u64"],["ordering"]],["u64"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["usize"],["ordering"]],["usize"]]],[11,"fetch_min","","Minimum with the current value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"fetch_max","","Maximum with the current value.",1,[[["self"],["u128"],["ordering"]],["u128"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["self"]]]],"paths":[[4,"Ordering"],[3,"Atomic"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
